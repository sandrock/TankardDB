
TankardDB - planned work
==================

TankardDB instance
----------------------

- Configuration: contains some kvps
- Store: object in charge of reading/writing files
- 

Public methods
-----------------

- [ ] Insert(obj)
  - Generate a new ID
  - Append object to ObjectStore
  - Append MainIndex
  - Update indexes
- [ ] Delete/Update(object)
  - Append empty/changed objects to ObjectStore
  - Append MainIndex
- [ ] GetById(string id)
  - Seek MainIndex until desired id(s) are found
  - Seek ObjectStore until object(s) are retreived
- [ ] List
  - Read n unique ids from main index
  - Read from ObjectStore
- [ ] Count
  - Count unique ids from MainIndex
- [ ] List<T>
  - Read n unique ids from MainIndex where (Name(T))
- [ ] CreateIndex<T(Expression<Func<T, object>> )


Internal todo
-----------------

- [x] Import SekvapLanguage.cs


Object store (file)
-----------------------

Properties:

- file is append only
- file is read by index (MainIndex)

Header:

    TankardDB-ObjectStore;Charset=UTF8\n

Content:

    {object}
    {object}
    ...

Notes:

- read header on initialize: read bytes from begin until '\n', interpret as ASCII, process Sekvap

Main index (file)
---------------------

Properties: 

- file is append only
- format: text; charset=???
- a cleanup job might remove content from the file

Header:

    TankardDB-MainIndex;Charset=UTF8\n

Content:

    {ObjectId};Str.Beg={ObjectStore.StartIndex};Str.End={ObjectStore.EndIndex}\n
    or
    {ObjectId};Del\n


Notes:

- read header on initialize: read bytes from begin until '\n', interpret as ASCII, process Sekvap


IStore
--------

Files:

- ObjectStore
- MainIndex


FileStore 
---------------

This type of storage uses a lock file to prevent concurrent access to the same data files.





